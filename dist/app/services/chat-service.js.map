{"version":3,"sources":["../src/app/services/chat-service.ts"],"names":[],"mappings":";AACA,8CAA6C;AAC7C,wCAAuC;AAIvC;IAKI;QAAA,iBAMC;QAVO,QAAG,GAAG,uBAAuB,CAAC;QAE9B,cAAS,GAAiB,IAAI,iBAAO,EAAE,CAAC;QAG5C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;QAC9C,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,cAAc,EAAE,UAAC,QAAQ,EAAE,GAAG;YACzC,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAC,QAAQ,UAAA,EAAC,GAAG,KAAA,EAAC,CAAC,CAAA;QACvC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,iCAAW,GAAX;QAAA,iBASC;QARG,IAAI,UAAU,GAAG,IAAI,uBAAU,CAAC,UAAA,QAAQ;YAGpC,MAAM,CAAC;gBACH,KAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;YAC7B,CAAC,CAAC;QACN,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,UAAU,CAAC;IACtB,CAAC;IAED,iCAAW,GAAX,UAAY,GAAG;QACX,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YACtC,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IAEjB,CAAC;IAED,+BAAS,GAAT,UAAU,QAAQ;QACd,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;YACpC,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IACL,kBAAC;AAAD,CAxCA,AAwCC,IAAA;AAxCY,kCAAW","file":"chat-service.js","sourcesContent":["import { Message } from '../models/message';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subject } from 'rxjs/Subject';\r\n// import * as io from 'socket.io';\r\ndeclare var io:any;\r\n\r\nexport class ChatService {\r\n    private url = 'http://localhost:3000';\r\n    private socket;\r\n    private _messages: Subject<any> = new Subject();\r\n    public messages: Observable<any>;\r\n    constructor(){\r\n        this.messages = this._messages.asObservable();        \r\n        this.socket = io(this.url);\r\n        this.socket.on('chat message', (username, msg) => {\r\n            this._messages.next({username,msg})\r\n        });\r\n    }\r\n\r\n    getMessages(){\r\n        let observable = new Observable(observer => {\r\n           \r\n            \r\n            return () => {\r\n                this.socket.disconnect();\r\n            };\r\n        });\r\n        return observable;\r\n    }\r\n\r\n    sendMessage(msg): boolean {\r\n        if (this.socket !== null) {\r\n            this.socket.emit('chat message', msg);\r\n            return true;\r\n        }\r\n        return false;\r\n\r\n    }\r\n\r\n    sendLogin(nickname): boolean {\r\n        if (this.socket !== null) {\r\n            this.socket.emit('login', nickname);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}"]}