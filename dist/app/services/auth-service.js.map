{"version":3,"sources":["../src/app/services/auth-service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAA2C;AAC3C,sCAAwE;AACxE,8CAA6C;AAE7C,mBAAiB;AAGjB,IAAa,WAAW;IAKpB,qBAAoB,KAAW;QAAX,UAAK,GAAL,KAAK,CAAM;QAFvB,QAAG,GAAG,uBAAuB,CAAC;QAGlC,IAAI,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAC9E,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,KAAK,GAAG,iBAAiB,CAAC,KAAK,CAAC;YACrC,IAAI,CAAC,GAAG,GAAG,iBAAiB,CAAC,EAAE,CAAC;QACpC,CAAC;IACL,CAAC;IAED,2BAAK,GAAL,UAAM,KAAa,EAAE,KAAa;QAC9B,IAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;QAChE,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC;QAClE,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACvD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC;aACtD,GAAG,CAAC,UAAC,QAAkB;YACpB,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC3B,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACrB,YAAY,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC1D,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;QACL,CAAC,CAAC;aACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAED,4BAAM,GAAN;QACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,YAAY,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;IACjD,CAAC;IAEO,4BAAM,GAAd,UAAe,QAAgB;QAC3B,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,QAAQ,CAAC;IACrC,CAAC;IAEO,iCAAW,GAAnB,UAAoB,KAAU;QAC1B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;YACxC,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QAC5E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACtB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IACL,kBAAC;AAAD,CA7CA,AA6CC,IAAA;AA7CY,WAAW;IADvB,iBAAU,EAAE;qCAMkB,WAAI;GALtB,WAAW,CA6CvB;AA7CY,kCAAW","file":"auth-service.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Response, Headers, RequestOptions } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { NgForm } from '@angular/forms';\r\nimport 'rxjs/Rx';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    public token: string;\r\n    public uid: number;\r\n    private url = 'http://localhost:3000';\r\n\r\n    constructor(private _http: Http) {\r\n        let authenticatedUser = JSON.parse(localStorage.getItem('authenticatedUser'));\r\n        if (authenticatedUser) {\r\n            this.token = authenticatedUser.token;\r\n            this.uid = authenticatedUser.id;\r\n        }\r\n    }\r\n\r\n    logIn(uname: string, pword: string): Observable<boolean> {\r\n        let body = JSON.stringify({ username: uname, password: pword });\r\n        let headers = new Headers({ 'Content-Type': 'application/json' });\r\n        let options = new RequestOptions({ headers: headers });\r\n        return this._http.post(this.getUrl('login'), body, options)\r\n            .map((response: Response) => {\r\n                let user = response.json();\r\n                if (user && user.token) {\r\n                    localStorage.setItem('currentUser', JSON.stringify(user));\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            })\r\n            .catch(this.handleError);\r\n    }\r\n\r\n    logOut(): void {\r\n        this.token = null;\r\n        localStorage.removeItem('authenticatedUser');\r\n    }\r\n\r\n    private getUrl(pathname: string): string {\r\n        return this.url + '/' + pathname;\r\n    }\r\n\r\n    private handleError(error: any): Observable<any> {\r\n        let errMsg = (error.message) ? error.message :\r\n            error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n        console.error(errMsg);\r\n        return Observable.throw(errMsg);\r\n    }\r\n}"]}